import pyjokes
import speech_recognition as sr
import pyttsx3
import webbrowser
import datetime
import wikipedia
import os
import smtplib
import openai
import subprocess, sys
import numpy as np
import random
import config
import apikey
#import webdriver
import pywhatkit




#wake_word = "Jarvis"

chatStr = ""

def chat(query):
    global chatStr
    print(chatStr)
    openai.api_key = apikey
    chatStr += f"Kashish: {query}\n Jarvis: "
    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=chatStr,
        temprature=0.7,
        max_tokens=256,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )

    #todo:wrap in try and catch block
    say(response["choices"][0]["text"])
    chatStr += f"{response['choices'][0]['text']}\n"
    return response["choices"][0]["text"]
def ai(prompt):
    openai.api_key = apikey
    text = f"OpenAI response for Prompt: {prompt} \n ************************* \n\n"
    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=prompt,
        temprature=0.7,
        max_tokens=256,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )

    #todo: Wrap this in try and catch block
    #print(response ["choice"][0]["text"])
    text += response ["choice"][0]["text"]
    if not os.path.exists("Openai"):
        os.mkdir("Openai")
    #with open (f"Openai/Prompt- {random.randint(1,23976249)}","w") as f:
    with open (f"Openai/{''.join(prompt.split('intelligence')[1:]).strip() }.txt","w") as f:
        f.write(text)
    print(response)
def say(text):
    os.system(f"say {text}")

Wake_word = "Jarvis"
def takeCommand():
    # Takes microphone input from user and returns string output
    r = sr.Recognizer()
    with sr.Microphone() as source:
        #r.pause_threshold = 1
        audio = r.listen(source)
        # todo:test the erroes.
        try:
            say("ok")
            query = r.recognize_google(audio, language="en-in")
            print(f"User said: {query}")
            return query
        except sr.WaitTimeoutError:
            print("Listening timeout. No speech detected.")
            return "a"
        except sr.UnknownValueError:
            print("Could not understand audio.")
            return "b"
        except KeyboardInterrupt:
            print("Keyboard interrupt detected. Exiting...")
            sys.exit(0)  # Exit the program:
        except Exception as e:
             return "ERROR!"


if __name__ == '__main__':
    print('Jarvis AI...')
    say("Hello I am Jarvis your Virtual assistant..")
    while True:
        print("Listening...")
        query = takeCommand()
        #add new site as needed.
        sites = [["youtube","https://youtube.com"],["wattpad","https://wattpad.com"],["wikipedia","https://wikipedia.com"],["google","https://google.com"]]
        for site in sites:
            if f"Open {site[0]}".lower() in query.lower():
                say (f"Opening {site[0]} Madam...")
                webbrowser.open(site[1])

        # create func. to
        if "music" in query:
            musicPath ='/Users/kairabarot/Desktop/Krishna.mp3'
            os.system(f"open {musicPath}")

        elif "wikipedia" in query:
            say("Searching Wikipedia...")
            query = query.replace("wikipedia","")
            result = wikipedia.summary(query, sentences=7)
            print(result)
            say(result)


        elif "the time" in query:
            musicPath ='/Users/kairabarot/Desktop/Krishna.mp3'
            strfTime = datetime.datetime.now().strftime("%H:%M:%S")
            hour = datetime.datetime.now().hour
            if 0 <= hour < 12:
                say("Good Morning Madam!")
            elif 12 <= hour < 18:
                say("Good Afternoon Madam!")
            else:
                say("Good Evening Madam!")
            say(f"Madam the current time is {strfTime}")

        elif "open FaceTime".lower() in query.lower():
            os.system(f"open /System/Applications/FaceTime.app ")

        elif "Using artifical intelligence".lower() in query.lower():
            ai(prompt=query)

        elif "joke" in query:
            say(pyjokes.get_joke())

        elif "open code" in query:
            codepath ="/Volumes/My Passport/PYcharm projects/Jarvis A.I/main.py"
            os.startfile(codepath)

        elif "Quit".lower() in query.lower():
            exit()

        elif "reset chat".lower() in query.lower():
            chatStr = ""

        else:
            print("Chatting...")
            chat(query)




        #say(query)




*********************************************************************
intit.py: ```

```
  AI.py: ``` import openai
from config import apikey
import apikey
import os
from Voice_interaction import say

def ai(prompt):
    openai.api_key = apikey
    text = f"OpenAI response for Prompt: {prompt} \n ************************* \n\n"
    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=prompt,
        temprature=0.7,
        max_tokens=256,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )

    #todo: Wrap this in try and catch block
    #print(response ["choice"][0]["text"])
    text += response ["choice"][0]["text"]
    if not os.path.exists("Openai"):
        os.mkdir("Openai")
    #with open (f"Openai/Prompt- {random.randint(1,23976249)}","w") as f:
    with open (f"Openai/{''.join(prompt.split('intelligence')[1:]).strip() }.txt","w") as f:
        f.write(text)
    print(response)

chatStr = ""
def chat(query):
    global chatStr
    print(chatStr)
    openai.api_key = apikey
    chatStr += f"Kashish: {query}\n Jarvis: "
    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=chatStr,
        temprature=0.7,
        max_tokens=256,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )

    #todo:wrap in try and catch block
    say(response["choices"][0]["text"])
    chatStr += f"{response['choices'][0]['text']}\n"
    return response["choices"][0]["text"]

``` ,

code_ecxecution.py: ```
import os

def open_code():
    codepath ="/Volumes/My Passport/PYcharm projects/Jarvis A.I/main.py"
    os.startfile(codepath)
```    ,

jokes.py:  ```
import pyjokes

def tell_joke():
    return pyjokes.get_joke()
```   ,

time_utilities.py:  ```
import datetime

def get_time():
    strfTime = datetime.datetime.now().strftime("%H:%M:%S")
    hour = datetime.datetime.now().hour
    if 0 <= hour < 12:
        return "Good Morning Madam!"
    elif 12 <= hour < 18:
        return "Good Afternoon Madam!"
    else:
        return "Good Evening Madam!"
    return f"Madam the current time is {strfTime}"
```   ,

voice_interaction.py:  ```
import speech_recognition as sr
import pyttsx3
import os
import sys


def takeCommand():
    # Takes microphone input from user and returns string output
    r = sr.Recognizer()
    with sr.Microphone() as source:
        r.pause_threshold = 1
        audio = r.listen(source)
        r.adjust_for_ambient_noise(source, duration=1)
        # todo:test the erroes.
        try:
            say("ok")
            query = r.recognize_google(audio, language="en-in")
            print(f"User said: {query}\n")
            return query
        except sr.WaitTimeoutError:
            print("Listening timeout. No speech detected.")
            return "a"
        except sr.UnknownValueError:
            print("Could not understand audio.")
            return "b"
        except KeyboardInterrupt:
            print("Keyboard interrupt detected. Exiting...")
            sys.exit(0)  # Exit the program:
        except Exception as e:
            return "ERROR!"


def say(text):
    os.system(f"say {text}")
```   ,

web_utilities.py: ```
import webbrowser

def open_website(site):
    webbrowser.open(site)
```,

 main.py:  ```
import os
import wikipedia
import pyjokes
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), 'Modules')))
from Modules import Voice_interaction
from Modules.Voice_interaction import say
from Modules.AI import ai
from Modules.AI import chat
from Modules import time_utilities
from Modules import web_utilities
'''
from Modules import code_ecxecution
from Modules import Jokes
from Modules import AI
'''

Wake_word = "Jarvis"

if __name__ == '__main__':
    print('Jarvis AI...')
    Voice_interaction.say("Hello I am Jarvis your Virtual assistant..")
    while True:
        print("Listening...")
        query = Voice_interaction.takeCommand()
        print("Responding..")

            #add new site as needed.
        sites = [
                 ["youtube", "https://youtube.com"],
                 ["wattpad", "https://wattpad.com"],
                 ["wikipedia", "https://wikipedia.com"],
                 ["google", "https://google.com"]
                ]
        for site in sites:
            if f"Open {site[0]}".lower() in query.lower():
                Voice_interaction.say (f"Opening {site[0]} Madam...")
                web_utilities.open_website(site[1])

        # create func. to
        if "music" in query:
            musicPath ='/Users/kairabarot/Desktop/Krishna.mp3'
            os.system(f"open {musicPath}")

        elif "wikipedia" in query:
            Voice_interaction.say("Searching Wikipedia...")
            query = query.replace("wikipedia","")
            result = wikipedia.summary(query, sentences=7)
            print(result)
            Voice_interaction.say(result)


        elif "the time" in query:
            musicPath ='/Users/kairabarot/Desktop/Krishna.mp3'
            Voice_interaction.say(time_utilities.get_time())

        elif "open FaceTime".lower() in query.lower():
            os.system(f"open /System/Applications/FaceTime.app ")


        elif "Using artifical intelligence".lower() in query.lower():

            ai(prompt=query)


        elif "joke" in query:

            say(pyjokes.get_joke())


        elif "open code" in query:

            codepath = "/Volumes/My Passport/PYcharm projects/Jarvis A.I/main.py"

            os.startfile(codepath)


        elif "Quit".lower() in query.lower():

            exit()


        elif "reset chat".lower() in query.lower():

            chatStr = ""


        else:

            print("Chatting...")

            chat(query)

        # say(query)
```   ,

config.py:  ```

apikey = "--"
```   ,

openaitest.py:  ```
import os
import openai
from config import apikey


openai.api_key = apikey

response = openai.Completion.create(
    model="text-davinci-003",
    prompt="",
    temprature=0.7,
    max_tokens=256,
    top_p=1,
    frequency_penalty=0,
    presence_penalty=0
)

print(response)
```

